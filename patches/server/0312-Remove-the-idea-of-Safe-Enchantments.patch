From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tofaa <82680183+Tofaa2@users.noreply.github.com>
Date: Wed, 19 Apr 2023 15:39:50 +0400
Subject: [PATCH] Remove the idea of Safe Enchantments


diff --git a/src/main/java/net/minecraft/server/commands/EnchantCommand.java b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
index 24c4ad919eeb9c5e15572ee32b0895c993ac6735..c74073476469f75a17246bbee457702dad1d39af 100644
--- a/src/main/java/net/minecraft/server/commands/EnchantCommand.java
+++ b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
@@ -22,67 +22,68 @@ import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 
 public class EnchantCommand {
-    private static final DynamicCommandExceptionType ERROR_NOT_LIVING_ENTITY = new DynamicCommandExceptionType((entityName) -> {
-        return Component.translatable("commands.enchant.failed.entity", entityName);
-    });
-    private static final DynamicCommandExceptionType ERROR_NO_ITEM = new DynamicCommandExceptionType((entityName) -> {
-        return Component.translatable("commands.enchant.failed.itemless", entityName);
-    });
-    private static final DynamicCommandExceptionType ERROR_INCOMPATIBLE = new DynamicCommandExceptionType((itemName) -> {
-        return Component.translatable("commands.enchant.failed.incompatible", itemName);
-    });
-    private static final Dynamic2CommandExceptionType ERROR_LEVEL_TOO_HIGH = new Dynamic2CommandExceptionType((level, maxLevel) -> {
-        return Component.translatable("commands.enchant.failed.level", level, maxLevel);
-    });
+    private static final DynamicCommandExceptionType ERROR_NOT_LIVING_ENTITY = new DynamicCommandExceptionType((entityName) -> Component.translatable("commands.enchant.failed.entity", entityName));
+    private static final DynamicCommandExceptionType ERROR_NO_ITEM = new DynamicCommandExceptionType((entityName) -> Component.translatable("commands.enchant.failed.itemless", entityName));
+    private static final DynamicCommandExceptionType ERROR_INCOMPATIBLE = new DynamicCommandExceptionType((itemName) -> Component.translatable("commands.enchant.failed.incompatible", itemName));
+    private static final Dynamic2CommandExceptionType ERROR_LEVEL_TOO_HIGH = new Dynamic2CommandExceptionType((level, maxLevel) -> Component.translatable("commands.enchant.failed.level", level, maxLevel));
     private static final SimpleCommandExceptionType ERROR_NOTHING_HAPPENED = new SimpleCommandExceptionType(Component.translatable("commands.enchant.failed"));
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher, CommandBuildContext registryAccess) {
-        dispatcher.register(Commands.literal("enchant").requires((source) -> {
-            return source.hasPermission(2);
-        }).then(Commands.argument("targets", EntityArgument.entities()).then(Commands.argument("enchantment", ResourceArgument.resource(registryAccess, Registries.ENCHANTMENT)).executes((context) -> {
-            return enchant(context.getSource(), EntityArgument.getEntities(context, "targets"), ResourceArgument.getEnchantment(context, "enchantment"), 1);
-        }).then(Commands.argument("level", IntegerArgumentType.integer(0)).executes((context) -> {
-            return enchant(context.getSource(), EntityArgument.getEntities(context, "targets"), ResourceArgument.getEnchantment(context, "enchantment"), IntegerArgumentType.getInteger(context, "level"));
-        })))));
+        dispatcher.register(
+                Commands.literal("enchant")
+                        .requires((source) -> source.hasPermission(2))
+                        .then(Commands.argument("targets", EntityArgument.entities())
+                                .then(
+                                        Commands.argument(
+                                                "enchantment",
+                                                ResourceArgument.resource(registryAccess, Registries.ENCHANTMENT)
+                                        ).executes(
+                                                (context) -> enchant(context.getSource(), EntityArgument.getEntities(context, "targets"),
+                                                        ResourceArgument.getEnchantment(context, "enchantment"), 1)
+                                        ).then(
+                                                Commands.argument("level", IntegerArgumentType.integer(0))
+                                                        .executes(
+                                                                (context) -> enchant(context.getSource(), EntityArgument.getEntities(context, "targets"),
+                                                                        ResourceArgument.getEnchantment(context, "enchantment"),
+                                                                        IntegerArgumentType.getInteger(context, "level")
+                                                                )
+                                                        )
+                                        )
+                                )
+                        )
+        );
     }
 
     private static int enchant(CommandSourceStack source, Collection<? extends Entity> targets, Holder<Enchantment> enchantment, int level) throws CommandSyntaxException {
         Enchantment enchantment2 = enchantment.value();
-        if (!org.purpurmc.purpur.PurpurConfig.allowUnsafeEnchantCommand && level > enchantment2.getMaxLevel()) { // Purpur
-            throw ERROR_LEVEL_TOO_HIGH.create(level, enchantment2.getMaxLevel());
-        } else {
-            int i = 0;
-
-            for(Entity entity : targets) {
-                if (entity instanceof LivingEntity) {
-                    LivingEntity livingEntity = (LivingEntity)entity;
-                    ItemStack itemStack = livingEntity.getMainHandItem();
-                    if (!itemStack.isEmpty()) {
-                        if ((enchantment2.canEnchant(itemStack) && EnchantmentHelper.isEnchantmentCompatible(EnchantmentHelper.getEnchantments(itemStack).keySet(), enchantment2)) || (org.purpurmc.purpur.PurpurConfig.allowUnsafeEnchantCommand && !itemStack.hasEnchantment(enchantment2))) { // Purpur
-                            itemStack.enchant(enchantment2, level);
-                            ++i;
-                        } else if (targets.size() == 1) {
-                            throw ERROR_INCOMPATIBLE.create(itemStack.getItem().getName(itemStack).getString());
-                        }
+        int i = 0;
+        for(Entity entity : targets) {
+            if (entity instanceof LivingEntity livingEntity) {
+                ItemStack itemStack = livingEntity.getMainHandItem();
+                if (!itemStack.isEmpty()) {
+                    if ((enchantment2.canEnchant(itemStack) && EnchantmentHelper.isEnchantmentCompatible(EnchantmentHelper.getEnchantments(itemStack).keySet(), enchantment2)) || (org.purpurmc.purpur.PurpurConfig.allowUnsafeEnchantCommand && !itemStack.hasEnchantment(enchantment2))) { // Purpur
+                        itemStack.enchant(enchantment2, level);
+                        ++i;
                     } else if (targets.size() == 1) {
-                        throw ERROR_NO_ITEM.create(livingEntity.getName().getString());
+                        throw ERROR_INCOMPATIBLE.create(itemStack.getItem().getName(itemStack).getString());
                     }
                 } else if (targets.size() == 1) {
-                    throw ERROR_NOT_LIVING_ENTITY.create(entity.getName().getString());
+                    throw ERROR_NO_ITEM.create(livingEntity.getName().getString());
                 }
+            } else if (targets.size() == 1) {
+                throw ERROR_NOT_LIVING_ENTITY.create(entity.getName().getString());
             }
+        }
 
-            if (i == 0) {
-                throw ERROR_NOTHING_HAPPENED.create();
+        if (i == 0) {
+            throw ERROR_NOTHING_HAPPENED.create();
+        } else {
+            if (targets.size() == 1) {
+                source.sendSuccess(Component.translatable("commands.enchant.success.single", enchantment2.getFullname(level), targets.iterator().next().getDisplayName()), true);
             } else {
-                if (targets.size() == 1) {
-                    source.sendSuccess(Component.translatable("commands.enchant.success.single", enchantment2.getFullname(level), targets.iterator().next().getDisplayName()), true);
-                } else {
-                    source.sendSuccess(Component.translatable("commands.enchant.success.multiple", enchantment2.getFullname(level), targets.size()), true);
-                }
-
-                return i;
+                source.sendSuccess(Component.translatable("commands.enchant.success.multiple", enchantment2.getFullname(level), targets.size()), true);
             }
+            return i;
         }
     }
 }
